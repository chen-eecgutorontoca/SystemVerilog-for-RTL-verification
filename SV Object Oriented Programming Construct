`timescale 1ns / 1ns
//////////////////////////////////////////////////////////////////////////////////
// Company: eecg.utoronto.ca
// Engineer: Bob C
// 
// Create Date: 05/11/2024 04:55:16 AM
// Design Name: Object Oriented Programming
// Module Name: testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

class A51;          //initialize a class with three variables
    int data1;
    int data2;
    int data3;
endclass

module tb();
    
    A51 constru;            //create the object
    
    initial begin
    constru = new();        //call constructor
    constru.data1 = 45;      //assign values to the object
    constru.data2 = 79;
    constru.data3 = 90;
    end
    
    initial begin
    $display("%0d  %0d  %0d",constru.data1, constru.data2, constru.data3);
    constru = null;        //deallocate memory space
    $finish;
    end
 
endmodule

module A52();

function int multiplication(input int a, input int b);        //write a function to perform multiplication
    return a*b;
endfunction

    int a;
    int b;
    int result;
    
initial begin
    a = $urandom();            //generate random values for a & b
    b = $urandom();
    //$display("a: %0d  b: %0d",a, b);
    result = multiplication(a,b);
    //$display("a*b = %0d",result);
    if(result == a*b)begin
        $display("Test Passed!");
    end else begin
        $display("Test Failed!");
    end
    $finish;
 end
 
 endmodule


module A53();    
      
   reg clk;  
   bit en;  
   bit wr;  
   bit [5:0] addr;  
   reg [31:0] cnt = 0;  
      
   initial begin  
       clk = 1'b0;  
       en = 1'b0;  
       wr = 1'b0;  
   end  
     
   always #20 clk = ~clk;     //25MHz clock
     
   always @(posedge clk) begin  
       if (en && wr) begin  
           if (cnt == 0) begin  
               addr_task(6'b001100);  
           end else if (cnt == 1) begin  
               addr_task(6'b001110);  
           end  
       end  
       else if(en &&!wr)begin
            if(cnt == 2)begin
                addr_task(6'b010111);
            end else if(cnt ==3) begin
                addr_task(6'b110000);
            end
       end
       else if(!en && !wr)begin
            addr_task(6'b111000);
       end
       cnt <= cnt + 1;
   end  
  
   task addr_task(input bit [5:0] newaddr);    //task to assign addr with new values
       addr = newaddr;
   endtask  
  
   initial begin                  //sequential control
       #20  
       en = 1;  
       wr = 1;  
       #80 
       wr = 0; 
       #80
       en = 0;
       #40
       $finish;  
   end  
      
   initial begin  
       $dumpfile("dump.vcd");  
       $dumpvars;  
   end  
      
endmodule


module A54();    //create a function to initalize array of 32 elements with multiplies of 8

bit [31:0] arr[32];

function automatic void generate_values(ref bit [31:0] arr[32]);    //create a function and pass an array by reference
    for(int i=0; i<32; i++)begin
        arr[i] = i*8;
    end
endfunction

    initial begin
    generate_values(arr);
    #10
    for(int j=0; j<32; j++)begin
        $display(arr[j]);
    end
    $finish;
    end
endmodule


class A55;
    bit [7:0] a;
    bit [7:0] b;
    bit [7:0] c;
    
    function new(input bit[7:0]a, input bit[7:0]b, input bit[7:0]c);    //constructor
        this.a = a;
        this.b = b;
        this.c = c;
    endfunction
    
    task display();
        $display("a: %0d, b: %0d, c:%0d",a,b,c);
    endtask;
    
endclass

module tb();
    A55 object;            //create an object of class A55
    
    initial begin
    object = new(2,4,56);        //call constructor
    object.display();    
    #10
    $finish;
    end
 
endmodule



class A56;
    bit [3:0] a;
    bit [3:0] b;
    bit [3:0] c;
    
    function new(input bit[3:0]a = 4'b0, input bit[3:0]b=4'b0, input bit[3:0]c=4'b0);    //constructor
        this.a = a;
        this.b = b;
        this.c = c;
    endfunction   

    task add(output bit[4:0]result);                //task to perform addition of three variables and send results to console
        result = a+b+c;
        $display("a=%0d, b=%0d, c=%0d, result: %0d", a,b,c,result);
    endtask
    
endclass
    
 module tb();
    bit [4:0] result;
    
    A56 object;               //create object
    
    initial begin                
    result = 5'b0;            
    end
    
    initial begin
    object = new(1,2,4);            //call constructor
    object.add(result);             //use task from class A56
    end
    
endmodule



class generator;
  
  bit [3:0] a = 5,b =7;
  bit wr = 1;
  bit en = 1;
  bit [4:0] s = 12;
  
  function void display();
    $display("a:%0d b:%0d wr:%0b en:%0b s:%0d", a,b,wr,en,s);
  endfunction
 
 function generator copy();        //create a function for deep copy
    copy = new();
    copy.a = a;
    copy.b = b;
    copy.wr = wr;
    copy.en = en;
    copy.s = s;
    endfunction
    
endclass

module tb();
    generator g1;
    generator g2;
    
    initial begin
        g1 = new();                    //call constructor
        g2 = g1.copy();                //perform deep copy, g1-> g2
        g2.wr = 0;
        g2.s = 11;
        g2.en = 0;
        g2.a = 4;
        g2.b = 9;
        g1.display();                  
        g2.display();
        $finish;
     end
    
endmodule
