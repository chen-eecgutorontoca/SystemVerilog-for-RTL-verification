`timescale 1ns / 1ns
//////////////////////////////////////////////////////////////////////////////////
// Company: eecg.utoronto.ca
// Engineer: Bob C
// 
// Create Date: 05/11/2024 04:55:16 AM
// Design Name: 
// Module Name: testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
class generator;        //create a class for three variables

    rand bit [7:0] x,y,z;
    constraint data {x inside {[1:255]}; y inside {[1:255]}; z inside {[1:255]}; }    //add a constraint 

endclass

module tb();
    generator g;        //create an instance of generator class
    int i;
    
    initial begin
        g = new();
        i=0;
        for(int i=0; i<20; i++)begin              //generate 20 random values for x,y,z
           assert(g.randomize())else begin                        //display failure message
               $display("randomization failed at %0t", $realtime);
           end
           $display("x: %0d, y: %0d, z:%0d at time = %0t",g.x, g.y, g.z, $realtime);    //print randomly generated values
        end
        $display("20 random values generation finished at time = %0t", $realtime);
        #20;
        $finish;
     end
   
endmodule

//create 20 random test cases for x, y, z in range of 0 to 50
class generator;
    randc bit [7:0] x;
    randc bit [7:0] y;
    randc bit [7:0] z;
    
    constraint data {x inside {[0:50]};         //set constraint between 0 to 50
                    y inside {[0:50]};
                    z inside {[0:50]};};
    
    function void display();                    //display result of xyz
        $display("value of x:%0d  y:%0d  z:%0d at time = %0t",x,y,z,$realtime);
    endfunction
    
endclass

module tb();

   generator g;        
   int i = 0;
   
   initial begin
    g = new();
    #20
    for(int i = 0; i<20; i++)begin                //randomization
        if(!g.randomize())begin
            $display("Randomization Failed at time = %0t",$realtime);
        end else begin
             g.display();
        end
       end
    $finish;  
    end
    
endmodule


class generator;
  
  rand bit [4:0] a;
  rand bit [5:0] b;
    
  extern constraint data;        //write constraint outside of class
 
endclass
   
constraint generator :: data{            //constraint inside scope of generator class
        a inside {[0:8]};
        b inside {[0:5]};
        };
  
module tb();
    generator g;
    int i = 0;
    int j = 0;            //randomization error count
    
    initial begin
        g = new();
        for(i=0; i<20; i++)begin
            if(!g.randomize())begin
                j++;
            end else begin
                $display("value of a: %0d b: %0d", g.a, g.b);        //print values of a and b at each iterations
            end
        end
        $display("Error count after generating 20 random values: %0d",j);
        $finish;
    end
 
 endmodule



class generator;
  
  rand bit rst;
  rand bit wr;
  
  constraint ctrl_sig{                //adding constraint with weighted distribution
    rst dist{0:=30, 1:=70};         //rst 30% low
    wr dist{0:=50, 1:=50};          //wr 50% high
    }
   
endclass

module tb();
    generator g;
    
    initial begin
        g = new();
        for(int i=0; i<20; i++)begin
            if(!g.randomize())begin
                $display("Randomization Failed at time=%0t",$time);
            end else begin
                $display("rst: %0d, wr: %0d at time=%0t", g.rst, g.wr, $time);
            end
        end
        $finish;
     end
     
