`timescale 1ns / 1ns
//////////////////////////////////////////////////////////////////////////////////
// Company: eecg.utoronto.ca
// Engineer: Bob C
// 
// Create Date: 05/11/2024 04:55:16 AM
// Design Name: 
// Module Name: tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module tb;    //A81
 
    int i,j =0;
    
 task task1;
   forever begin                //infinite loop
      #20
      $display("Task 1 Trigger");
      i++;
    end
endtask
  
task task2;
    forever begin
        #40
        $display("Task 2 Trigger");
        j++;
    end
endtask

task run;        //run for 200 ns, adjust if needed
    #200;
endtask

    initial begin
      fork              //task1 and 2 will both run for 200ns
        task1();
        task2();
        run();
      join_any
    $display("Task1 count: %0d, Task2 count: %0d",i,j);
    $finish;
    end
 
 endmodule 

//send transaction data between driver and generator
class transaction;  
   
    bit [7:0] addr = 8'h12;
    bit [3:0] data = 4'h4;  
    bit we = 1'b1;  
    bit rst = 1'b0;  
   
endclass  
  
class generator;  
    transaction t;  //create instance of transcation class
    mailbox mbx;   //declare a mailbox to transfer info 
      
    task send();  
        t = new(); 
        mbx.put(t);       //send data
        $display("[GEN] DATA SENT addr:%0h, data:%0h, we:%b, rst:%b", t.addr, t.data, t.we, t.rst);  
    endtask  
  
  	function new(mailbox mbx);      //automate mailbox communication
        this.mbx = mbx;
    endfunction
      
endclass  
  
class driver;  
    transaction t2;  
    mailbox mbx;  
        
    task receive();  
        mbx.get(t2);      //recieve data from mailbox
        $display("[DRV] DATA RECEIVED addr:%0h, data:%0h, we:%b, rst:%b", t2.addr, t2.data, t2.we, t2.rst);
    endtask  
      
 	function new(mailbox mbx);
        this.mbx = mbx;
    endfunction
    
endclass 

module tb();
    driver d;
    generator g;
    mailbox mbx;
    
    initial begin
        mbx = new();     //mailbox is also a class
        d = new(mbx);    //enable mailbox communication
        g = new(mbx);
        fork             //wait for data transfer to finish
            g.send();
            d.receive();
        join
        $finish;
    end
    
endmodule


class transaction;
 
rand bit [7:0] a;
rand bit [7:0] b;
rand bit wr;
 
constraint data{wr dist{1:=50,0:=50};}
endclass

class generator;
    transaction t1;
    mailbox #(transaction) mbx;
    
    function new(mailbox #(transaction) mbx);
        this.mbx = mbx;
    endfunction
    
    task main();      
        for(int i=0; i<10; i++)begin
            t1 = new();
            assert(t1.randomize())else $display("Randomization Failed at time=%0t",$time);
              mbx.put(t1);
              $display("[GEN] DATA SENT a:%0d, b:%0d, wr:%0d", t1.a, t1.b, t1.wr);
              #10;
         end
    endtask
    
endclass

class driver;
    transaction t2;
    mailbox #(transaction) mbx;
    
    function new(mailbox #(transaction) mbx);
        this.mbx = mbx;
    endfunction
    
    task main(); 
        forever begin
            t2 = new();
            mbx.get(t2);
            $display("[GEN] DATA RCVD a:%0d, b:%0d, wr:%0d", t2.a, t2.b, t2.wr);
            #10;
        end
   endtask
 
 endclass
 
 module tb;
    driver d;
    generator g;
    mailbox #(transaction) mbx;
    
    initial begin
        mbx = new();
        d = new(mbx);
        g = new(mbx);
        fork
            g.main();
            d.main();
        join
        $finish;
    end
    
 endmodule
