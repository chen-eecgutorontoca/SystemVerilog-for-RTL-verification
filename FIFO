//Author: Bob C

//rtl
/---------------------------------------------------/
module FIFO(
    input clk,
    input rst_n,
    input rd_en,
    input wr_en,
    input [15:0] din,
    output reg [15:0] dout,
    output reg empty,
    output reg full
);
    reg [3:0] wr_ptr;
    reg [3:0] rd_ptr;
    reg [7:0] mem [15:0]; 
 	reg [3:0] cnt;
 
    always @(posedge clk or negedge rst_n) begin
      if (!rst_n)
            wr_ptr <= 4'b0;
        else if (wr_en && !full) 
            wr_ptr <= wr_ptr + 1;
        else
          	wr_ptr <= wr_ptr;
    end

 
    always @(posedge clk or negedge rst_n) begin
      if (!rst_n)
            rd_ptr <= 4'b0;
        else if (rd_en && !empty) 
            rd_ptr <= rd_ptr + 1;
        else
          	rd_ptr <= rd_ptr;
    end


    always @(posedge clk) begin
        if (wr_en && !full)
            mem[wr_ptr] <= din;
        else
          mem[wr_ptr] <= mem[wr_ptr];
    end

    always @(posedge clk) begin
        if (rd_en && !empty)
            dout <= mem[rd_ptr];
        else
          	dout <= dout;
    end
 	
   always@(posedge clk or negedge rst_n)begin
     if(!rst_n)
        cnt <= 4'b0;
     else if(wr_en && !rd_en)
      	cnt <= cnt + 1;
     else if(rd_en && !wr_en)
      	cnt <= cnt - 1;
     else
      	cnt <= cnt;
   end 
  
  assign full = (cnt==4'b1111)? 1:0;
  assign empty = (cnt==4'b0)? 1:0;
  
endmodule
/----------------------------------------------/

//interface
/---------------------------------------------/
interface FIFO_IF;
  
  logic clk;
  logic rst_n;
  logic rd_en, wr_en;
  logic [15:0] din;
  logic [15:0] dout;
  logic empty, full;
  
endinterface
/---------------------------------------------/

/----------------------------------------------/
class transaction;
  bit clk;
  bit rst_n;
  rand bit rd_en, wr_en;
  rand bit [15:0] din;
  bit [15:0] dout;
  bit empty, full;
  
  constraint wr {
    rd_en dist {1 := 50, 0 := 50};
    wr_en dist {1 := 50, 0 := 50};
    rd_en!=wr_en;
  }
  
endclass
/-------------------------------------------/


class generator;
  transaction tr;
  mailbox #(transaction) mbx;
  event next;
  event done;
  
  function new(mailbox #(transaction)mbx);
    this.mbx = mbx;
    tr = new();
  endfunction
  
  task generate_transaction;
    #20;
    repeat(5)begin
      assert(tr.randomize())else $display("Randomization Failed!");
      mbx.put(tr);
      $display("GEN: wr_en: %0d, rd_en: %0d, din:%0d", tr.wr_en, tr.rd_en, tr.din);
      @(next);
    end ->done;
  endtask
  
endclass



class driver;
  transaction t;
  mailbox #(transaction) mbx;
  virtual FIFO_IF ff;
  
  function new(mailbox #(transaction) mbx);
    this.mbx = mbx;
  endfunction
  
  task reset();
    ff.rst_n <= 1'b0;
    ff.rd_en <= 1'b0;
    ff.wr_en <= 1'b0;
    ff.din <= 15'b0;
    #40;
    ff.rst_n <= 1;
    $display("Reset Done!");
  endtask
  
  task drive_signals();
  forever begin
    mbx.get(t);
    repeat(2)@(posedge ff.clk); 
    if(t.wr_en==1) begin
      ff.wr_en <= 1'b1;
      ff.rd_en <= 1'b0;
      ff.din = t.din;
     $display("DRV W: wr_en: %0d, rd_en: %0d, din:%0d", t.wr_en, t.rd_en, t.din);
     @(posedge ff.clk);
     ff.wr_en <= 1'b0;
    end 
    if(t.rd_en==1) begin
      ff.wr_en <= 1'b0;
      ff.rd_en <= 1'b1;
      $display("DRV R: wr_en: %0d, rd_en: %0d, ", t.wr_en, t.rd_en);
      @(posedge ff.clk);
      ff.rd_en <= 1'b0;
    end
  end
endtask

  
  
endclass



class monitor;
  transaction tr;
  virtual FIFO_IF ff;
  mailbox #(transaction) mbx;
  
  function new(mailbox #(transaction) mbx);
    this.mbx = mbx;
  endfunction
  
  
  task get_signals();
  tr = new();
  forever begin
   @(posedge ff.clk);
    tr.rd_en = ff.rd_en;
    tr.wr_en = ff.wr_en;
    tr.din = ff.din; 
    tr.empty = ff.empty;
    tr.full = ff.full;
    @(posedge ff.clk); 
    tr.dout = ff.dout;
    mbx.put(tr);
    $display("MON: wr_en: %0d, rd_en: %0d, din:%0d, dout:%0d, empty:%0d, full: %0d", 
         tr.wr_en, tr.rd_en, tr.din, tr.dout, tr.empty, tr.full);
  end
endtask

  
endclass



class scoreboard;
  transaction t;
  mailbox #(transaction) mbx;
  
  event next;
  
  bit [15:0] test_data[$];       
  bit [15:0] golden_output;
  int error_cnt = 0;
  
  function new(mailbox #(transaction) mbx);
    this.mbx = mbx;
  endfunction
  
  task compare_results;
    forever begin
      mbx.get(t);
     $display("SCO: wr_en: %0d, rd_en: %0d, din: %0d, dout: %0d, full: %0d, \
         empty: %0d", t.wr_en, t.rd_en, t.din, t.dout, t.full, t.empty);      
	  if(t.wr_en==1 && !t.full)
        test_data.push_front(t.din);
        $display("Data Stored: %0d", t.din);
      if(t.rd_en==1 && !t.empty)
        golden_output = test_data.pop_back();
        if(t.dout == golden_output)
          $display("TEST PASSED!");
        else 
          $display("TEST FAILED! Expected: %0d, Got: %0d", golden_output, t.dout);
          error_cnt++;

      ->next;
    end
  endtask
        
endclass

               
class environment;
  generator g;
  driver d;
  monitor m;
  scoreboard s;
  mailbox #(transaction) mbxgd;
  mailbox #(transaction) mbxms;    
  virtual FIFO_IF ff;
  
  event next;
  
  function new(virtual FIFO_IF ff);
    mbxgd = new();
    mbxms = new();
    g = new(mbxgd);
    d = new(mbxgd);
    m = new(mbxms);
    s = new(mbxms);
    
    this.ff = ff;
    d.ff = this.ff;
    m.ff = this.ff;
    
    g.next = next;
    s.next = next;
  endfunction
  
  task run();
    fork
     g.generate_transaction();
      d.drive_signals();
      m.get_signals();
      s.compare_results();
    join_any
  endtask
  
  task run_time();
    wait(g.done.triggered);
    if(s.error_cnt==0)
      $display("All TESTS PASSED!");
    else
      $display("Number of Tests Failed: %0d", s.error_cnt);
    $finish;
  endtask
  
  task main();
    d.reset();
    run();
    run_time();
  endtask
 
endclass

module tb;
  
  environment e;
  FIFO_IF ff();
  
  always #10 ff.clk = ~ff.clk;
  
  FIFO dut(.clk(ff.clk), .rst_n(ff.rst_n), .rd_en(ff.rd_en),
           .wr_en(ff.wr_en), .din(ff.din), .dout(ff.dout),
           .empty(ff.empty), .full(ff.full));
  
  initial begin
    ff.clk = 1'b0;
  end
  
  initial begin
    e = new(ff);
    e.main();
  end
  
  
endmodule
  
  
endmodule
