`timescale 1ns / 1ns
//////////////////////////////////////////////////////////////////////////////////
// Company: eecg.utoronto.ca
// Engineer: Bob C
// 
// Create Date: 05/11/2024 04:55:16 AM
// Design Name: testbench
// Module Name: 
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module A31();     
    
    reg [7:0] a;
    reg [7:0] b;
    integer c;
    integer d;
    
    initial begin
    a = 12;
    b = 34;
    c = 67;
    d = 255;
    end
    
    initial begin
    #12
    $display("value of a is: %d",a);
    $display("value of b is: %d", b);
    $display("value of c is: %d", c);
    $display("value of d is: %d", d);
    $finish;
    end
 
     
endmodule

module A32();        //initialize an array

   int arr[10] = '{0,1,4,9,16,25,36,49,64,81};
   initial begin
   $display("arr: %0p",arr);
   $finish;
   end
endmodule

module A33();        //create two reg type arrays capable of storing 15 random values

    reg arr [14:0];
    reg arr2 [14:0];

    int i=0;
    initial begin
        for(int i=0; i<15; i++)begin
            arr[i] = {$random}%2;
        end
    end
    
    initial begin
        $display("arr: %0p",arr);
        $finish;
    end
endmodule

/*
Create a dynamic array capable of storing 7 elements. add a value of multiple of 7 starting from 7 in the array (7, 14, 21 ....49). After 20 nsec Update the size of the dynamic array to 20. Keep existing values of the array as it is and update the rest 13 elements to a multiple of 5 starting from 5. Print Value of the dynamic array after updating all the elements.
Expected result : 7, 14, 21, 28 ..... 49, 5, 10, 15 ..... 65 .
*/

module A34();
    int arr[];  //create a dynamic array
    int i;
    int j;
    
    initial begin
    i=0;
    j=0;
    end
    
    initial begin        
        arr=new[7];            //allocate 7 spaces
        repeat(7)begin
          arr[i]=7*i+7;
          i++;
         // $display("%0d:%0d",i,arr[i]);       
        end
    end
    
     initial begin
      #20
      arr=new[20](arr);    //allocate 13 more spaces and transfer existing data to expanded array
      repeat(13)begin
        arr[j+7]=5*j+5;
        j++;
      end
      $display("arr: %0p",arr);
      $finish;
     end
      
     initial begin
     $dumpfile("dump.vcd");
     $dumpvars;
     end
     
 
 endmodule


